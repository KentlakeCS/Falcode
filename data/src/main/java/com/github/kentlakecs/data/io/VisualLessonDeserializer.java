/*
 * MIT License
 *
 * Copyright (c) 2024 Jackson Brienen
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.github.kentlakecs.data.io;

import java.lang.reflect.Type;
import com.github.kentlakecs.data.*;
import com.github.kentlakecs.data.factory.AbstractDataFactory;
import com.google.gson.*;

/**
 * {@link JsonDeserializer} to deserialize serialized Json created via {@link VisualLessonSerializer} in to a {@link VisualLesson}
 * 
 * @author Jackson Brienen
 * @version 1.0
 */
class VisualLessonDeserializer extends Deserializer<VisualLesson> {

    /**
     * Constant VisualLesson Json Property names used for {@link JsonObject#get(String)}
     */
    private static final String NAME = "name",
                                STARTING_CODE = "startingCode",
                                DESCRIPTION = "description",
                                ALLOWED_METHODS = "allowedMethods",
                                REQUIRED_STRINGS = "requiredStrings",
                                STARTING_GRIDS = "startingGrids",
                                ENDING_GRIDS = "endingGrids";

    /**
     * Constructs a new {@link VisualLessonDeserializer}
     * @param adf DataFactory to be used to instantiate objects when {@link #deserialize(JsonElement, Type, JsonDeserializationContext)} is called
     */
    public VisualLessonDeserializer(AbstractDataFactory adf) {
        super(adf);
    }

    /**
     * Deserializes a {@link VisualLesson} that has been serialized via the {@link VisualLessonSerializer}.
     * Instantiating the {@link VisualLesson} via the given {@link AbstractDataFactory}
     * @param json a {@link JsonElement} representing a {@link VisualLesson}
     * @param typeOfT {@link VisualLesson#getClass()}
     * @param context The default {@link JsonDeserializationContext} generated by some {@link GsonBuilder}
     * @return a deserialized {@link VisualLesson}
     */
    @Override
    public VisualLesson deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)throws JsonParseException {
        JsonObject o = json.getAsJsonObject();

        return adf.visualLesson(
            o.get(NAME).getAsString(),
            o.get(STARTING_CODE).getAsString(),
            o.get(DESCRIPTION).getAsString(),
            context.deserialize(o.get(ALLOWED_METHODS), Method[].class),
            context.deserialize(o.get(REQUIRED_STRINGS), String[].class),
            context.deserialize(o.get(STARTING_GRIDS), Grid[].class),
            context.deserialize(o.get(ENDING_GRIDS), Grid[].class)
        );
    }
    
}
