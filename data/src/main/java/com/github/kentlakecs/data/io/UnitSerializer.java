/*
 * MIT License
 *
 * Copyright (c) 2024 Jackson Brienen
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.github.kentlakecs.data.io;

import java.lang.reflect.Type;

import com.github.kentlakecs.data.*;
import com.google.gson.*;

/**
 * {@link JsonSerializer} to serialize {@link Unit} objects
 * 
 * @author Jackson Brienen
 * @version 1.0
 */
class UnitSerializer implements JsonSerializer<Unit> {

    /**
     * Constant Unit Json Property names used for {@link JsonObject#add(String, JsonElement)} and {@link JsonObject#addPoperty}
     */
    private static final String NAME = "name",
                                LESSONS = "lessons";

    /**
     * Creates a {@link JsonElement} representing the given {@link Unit}
     * @param src a {@link Unit}
     * @param typeOfSrc {@link Unit#getClass()}
     * @param context The default {@link JsonSerializationContext} generated by some {@link GsonBuilder}
     * @return a {@link JsonElement} representing the given {@link Unit}
     */
    @Override
    public JsonElement serialize(Unit src, Type typeOfSrc, JsonSerializationContext context) {
        JsonObject o = new JsonObject();

        o.addProperty(NAME, src.getName());
        o.add(LESSONS, context.serialize(src.getLessons(), Lesson[].class));

        return o;
    }
    
}
